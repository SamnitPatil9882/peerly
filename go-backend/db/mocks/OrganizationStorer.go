// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"
	db "joshsoftware/peerly/db"

	dto "joshsoftware/peerly/pkg/dto"

	mock "github.com/stretchr/testify/mock"
)

// OrganizationStorer is an autogenerated mock type for the OrganizationStorer type
type OrganizationStorer struct {
	mock.Mock
}

// CreateOrganization provides a mock function with given fields: ctx, org
func (_m *OrganizationStorer) CreateOrganization(ctx context.Context, org dto.Organization) (db.Organization, error) {
	ret := _m.Called(ctx, org)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrganization")
	}

	var r0 db.Organization
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.Organization) (db.Organization, error)); ok {
		return rf(ctx, org)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.Organization) db.Organization); ok {
		r0 = rf(ctx, org)
	} else {
		r0 = ret.Get(0).(db.Organization)
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.Organization) error); ok {
		r1 = rf(ctx, org)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteOrganization provides a mock function with given fields: ctx, organizationID, userId
func (_m *OrganizationStorer) DeleteOrganization(ctx context.Context, organizationID int, userId int64) error {
	ret := _m.Called(ctx, organizationID, userId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOrganization")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int64) error); ok {
		r0 = rf(ctx, organizationID, userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetOrganization provides a mock function with given fields: ctx, organizationID
func (_m *OrganizationStorer) GetOrganization(ctx context.Context, organizationID int) (db.Organization, error) {
	ret := _m.Called(ctx, organizationID)

	if len(ret) == 0 {
		panic("no return value specified for GetOrganization")
	}

	var r0 db.Organization
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (db.Organization, error)); ok {
		return rf(ctx, organizationID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) db.Organization); ok {
		r0 = rf(ctx, organizationID)
	} else {
		r0 = ret.Get(0).(db.Organization)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, organizationID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrganizationByDomainName provides a mock function with given fields: ctx, domainName
func (_m *OrganizationStorer) GetOrganizationByDomainName(ctx context.Context, domainName string) (db.Organization, error) {
	ret := _m.Called(ctx, domainName)

	if len(ret) == 0 {
		panic("no return value specified for GetOrganizationByDomainName")
	}

	var r0 db.Organization
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (db.Organization, error)); ok {
		return rf(ctx, domainName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) db.Organization); ok {
		r0 = rf(ctx, domainName)
	} else {
		r0 = ret.Get(0).(db.Organization)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, domainName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsDomainPresent provides a mock function with given fields: ctx, domainName
func (_m *OrganizationStorer) IsDomainPresent(ctx context.Context, domainName string) bool {
	ret := _m.Called(ctx, domainName)

	if len(ret) == 0 {
		panic("no return value specified for IsDomainPresent")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, domainName)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// IsEmailPresent provides a mock function with given fields: ctx, email
func (_m *OrganizationStorer) IsEmailPresent(ctx context.Context, email string) bool {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for IsEmailPresent")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// IsOrganizationIdPresent provides a mock function with given fields: ctx, organizationId
func (_m *OrganizationStorer) IsOrganizationIdPresent(ctx context.Context, organizationId int64) bool {
	ret := _m.Called(ctx, organizationId)

	if len(ret) == 0 {
		panic("no return value specified for IsOrganizationIdPresent")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, int64) bool); ok {
		r0 = rf(ctx, organizationId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ListOrganizations provides a mock function with given fields: ctx
func (_m *OrganizationStorer) ListOrganizations(ctx context.Context) ([]db.Organization, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListOrganizations")
	}

	var r0 []db.Organization
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]db.Organization, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []db.Organization); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Organization)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateOrganization provides a mock function with given fields: ctx, reqOrganization
func (_m *OrganizationStorer) UpdateOrganization(ctx context.Context, reqOrganization dto.Organization) (db.Organization, error) {
	ret := _m.Called(ctx, reqOrganization)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrganization")
	}

	var r0 db.Organization
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.Organization) (db.Organization, error)); ok {
		return rf(ctx, reqOrganization)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.Organization) db.Organization); ok {
		r0 = rf(ctx, reqOrganization)
	} else {
		r0 = ret.Get(0).(db.Organization)
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.Organization) error); ok {
		r1 = rf(ctx, reqOrganization)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewOrganizationStorer creates a new instance of OrganizationStorer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrganizationStorer(t interface {
	mock.TestingT
	Cleanup(func())
}) *OrganizationStorer {
	mock := &OrganizationStorer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
